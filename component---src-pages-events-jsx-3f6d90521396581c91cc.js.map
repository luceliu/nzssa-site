{"version":3,"sources":["webpack:///./src/pages/events.jsx"],"names":["__webpack_require__","r","__webpack_exports__","d","query","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","react_helmet__WEBPACK_IMPORTED_MODULE_1__","react_helmet__WEBPACK_IMPORTED_MODULE_1___default","react_emotion__WEBPACK_IMPORTED_MODULE_2__","prop_types__WEBPACK_IMPORTED_MODULE_3__","prop_types__WEBPACK_IMPORTED_MODULE_3___default","components__WEBPACK_IMPORTED_MODULE_4__","layouts__WEBPACK_IMPORTED_MODULE_5__","HeaderTitle","styled","target","Events","_ref","data","console","log","edges","allMarkdownRemark","a","createElement","title","map","_ref2","node","key","id","frontmatter","date","excerpt","colour","path","location","propTypes","PropTypes","shape","arrayOf","string","isRequired","tags","array","Container","center","object"],"mappings":"0FAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,0BAAAE,IAAA,IAAAC,EAAAL,EAAA,GAAAM,EAAAN,EAAAO,EAAAF,GAAAG,EAAAR,EAAA,KAAAS,EAAAT,EAAAO,EAAAC,GAAAE,EAAAV,EAAA,KAAAW,EAAAX,EAAA,GAAAY,EAAAZ,EAAAO,EAAAI,GAAAE,EAAAb,EAAA,KAAAc,EAAAd,EAAA,KAgBMe,EAAcC,YAAH,MAAAC,OAAA,YAAGD,CAAH,aA+BXE,EAAS,SAAAC,GAAc,IAAXC,EAAWD,EAAXC,KAChBC,QAAQC,IAAIF,GADe,IAEnBG,EAAUH,EAAKI,kBAAfD,MAGR,OAFAF,QAAQC,IAAIC,GACZF,QAAQC,IAAIC,EAAM,IAEhBjB,EAAAmB,EAAAC,cAACZ,EAAA,EAAD,KACER,EAAAmB,EAAAC,cAACjB,EAAAgB,EAAD,CAAQE,MAAO,WACfrB,EAAAmB,EAAAC,cAACb,EAAA,EAAD,CAAQc,MAAM,WAEdrB,EAAAmB,EAAAC,cAACZ,EAAA,EAAD,KACER,EAAAmB,EAAAC,cAACX,EAAD,iBACCQ,EAAMK,IAAI,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,KAAH,OACTxB,EAAAmB,EAAAC,cAACb,EAAA,EAAD,CACEkB,IAAKD,EAAKE,GACVL,MAAOG,EAAKG,YAAYN,MACxBO,KAAMJ,EAAKG,YAAYC,KACvBC,QAASL,EAAKK,QACdC,OAAQN,EAAKG,YAAYG,OACzBC,KAAMP,EAAKG,YAAYI,KACvBC,SAAUR,EAAKG,YAAYK,gBAQxBpB,YAEfA,EAAOqB,UAAY,CACjBnB,KAAMoB,IAAUC,MAAM,CACpBjB,kBAAmBgB,IAAUC,MAAM,CACjClB,MAAOiB,IAAUE,QACfF,IAAUC,MAAM,CACdX,KAAMU,IAAUC,MAAM,CACpBN,QAASK,IAAUG,OACnBV,YAAaO,IAAUC,MAAM,CAC3Bd,MAAOa,IAAUG,OAAOC,WACxBV,KAAMM,IAAUG,OAAOC,WACvBR,OAAQI,IAAUG,OAAOC,WACzBN,SAAUE,IAAUG,OAAOC,WAC3BP,KAAMG,IAAUG,OAAOC,WACvBC,KAAML,IAAUM,YAGnBF,iBAMXG,IAAUR,UAAY,CACpBS,OAAQR,IAAUS,QAGb,IAAM7C,EAAK","file":"component---src-pages-events-jsx-3f6d90521396581c91cc.js","sourcesContent":["import React from 'react';\nimport Helmet from 'react-helmet';\nimport styled from 'react-emotion';\nimport PropTypes from 'prop-types';\nimport { Header, SingleEvent } from 'components';\nimport { Layout, Container } from 'layouts';\nimport { graphql } from 'gatsby';\n\nconst Text = styled.div`\n  margin: 1rem;\n  display: inline-block;\n  vertical-align: middle;\n  position: absolute;\n  top: 220px;\n`;\n\nconst HeaderTitle = styled.h1`\n  margin: 0;\n`;\n\nconst GridWrapperThirds = styled.div`\n  margin: 0 auto;\n  display: grid;\n  grid-template-columns: 250px 250px 250px;\n  grid-template-rows: 40px;\n  grid-row-gap: 0px;\n  grid-column-gap: 0px;\n  padding-left: 50px;\n  padding-bottom: 30px;\n  padding-top: 30px;\n  width: 75%;\n  align-content: space-around;\n  @media (max-width: ${props => props.theme.breakpoints.m}) {\n    width: 90%;\n    grid: 400px 400px 400px/ 300px 300px;\n  }\n  @media (max-width: ${props => props.theme.breakpoints.s}) {\n    width: 95%;\n    grid: repeat(6, 400px) / 300px;\n  }\n  max-width: ${props => props.theme.layout[props.type]};\n  height: 100%;\n`;\n\nconst Card = styled.div`\n`;\n\nconst Events = ({ data }) => {\n  console.log(data);\n  const { edges } = data.allMarkdownRemark;\n  console.log(edges);\n  console.log(edges[0]);\n  return (\n    <Layout>\n      <Helmet title={'Events'} />\n      <Header title=\"Events\"></Header>\n\n      <Container>\n        <HeaderTitle>Upcoming</HeaderTitle>\n        {edges.map(({ node }) => (\n          <SingleEvent\n            key={node.id}\n            title={node.frontmatter.title}\n            date={node.frontmatter.date}\n            excerpt={node.excerpt}\n            colour={node.frontmatter.colour}\n            path={node.frontmatter.path}\n            location={node.frontmatter.location}\n          />\n        ))}\n      </Container>\n    </Layout>\n  );\n};\n\nexport default Events;\n\nEvents.propTypes = {\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            excerpt: PropTypes.string,\n            frontmatter: PropTypes.shape({\n              title: PropTypes.string.isRequired,\n              date: PropTypes.string.isRequired,\n              colour: PropTypes.string.isRequired,\n              location: PropTypes.string.isRequired,\n              path: PropTypes.string.isRequired,\n              tags: PropTypes.array,\n            }),\n          }),\n        }).isRequired\n      ),\n    }),\n  }),\n};\n\nContainer.propTypes = {\n  center: PropTypes.object,\n};\n\nexport const query = graphql`\n  query {\n    allMarkdownRemark(\n      filter: { fileAbsolutePath: { regex: \"/(/content/events)/.*\\\\.md$/\" } }\n      sort: { order: ASC, fields: [frontmatter___date] }\n    ) {\n      edges {\n        node {\n        excerpt(pruneLength: 200)\n          frontmatter {\n            title\n            path\n            date\n            colour\n            location\n            published\n            _PARENT\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}